Index: pptpd-1.4.0/pptpmanager.c
===================================================================
--- pptpd-1.4.0.orig/pptpmanager.c	2013-10-23 12:53:49.000000000 +0800
+++ pptpd-1.4.0/pptpmanager.c	2016-06-20 21:10:55.158542450 +0800
@@ -81,8 +81,10 @@
 /* data about connection slots */
 struct slot {
   pid_t pid;
+  time_t login_time;  
   char *local;
   char *remote;
+  char * clientip;
 } *slots;
 
 /* number of connection slots allocated */
@@ -109,6 +111,20 @@
   slot_iterate(slots, slot_count, slot_slot_init);
 }
 
+static void slot_save_info()
+{
+  int i=0;
+  FILE * fp = fopen("/tmp/pptp_ip.txt", "w");
+  for (i=0; i < slot_count; i++)
+  {
+    if (slots[i].pid != 0 && slots[i].local && slots[i].remote )
+    {
+      fprintf(fp, "%s %s %u\n", slots[i].remote, slots[i].clientip, slots[i].login_time);
+    }
+  }
+
+  fclose(fp);
+}
 static void slot_slot_free(struct slot *slot)
 {
   slot->pid = 0;
@@ -116,6 +132,8 @@
   slot->local = NULL;
   if (slot->remote) free(slot->remote);
   slot->remote = NULL;
+  if (slot->clientip) free(slot->clientip);
+  slot->clientip = NULL;
 }
 
 void slot_free()
@@ -126,6 +144,13 @@
   slot_count = 0;
 }
 
+void slot_set_clientip(int i, char *ip)
+{
+  struct slot *slot = &slots[i];
+  if (slot->clientip) free(slot->clientip);
+  slot->clientip = strdup(ip);
+}
+
 void slot_set_local(int i, char *ip)
 {
   struct slot *slot = &slots[i];
@@ -143,7 +168,10 @@
 void slot_set_pid(int i, pid_t pid)
 {
   struct slot *slot = &slots[i];
-  slot->pid = pid; 
+  slot->pid = pid;
+  if (pid != 0)
+	slot->login_time = time(NULL); 
+  slot_save_info();
 }
 
 int slot_find_by_pid(pid_t pid)
@@ -203,7 +231,8 @@
 
         int hostSocket;
         fd_set connSet;
-
+        struct sockaddr_in addr; 
+        int addrlen = sizeof(addr);
         int rc, sig_fd;
 
         rc = sigpipe_create();
@@ -379,6 +408,8 @@
                                         _exit(1);
                                         /* NORETURN */
                                 default:        /* parent */
+                                        getpeername(clientSocket, (struct sockaddr *) &addr, &addrlen) ;
+                                        slot_set_clientip(firstOpen, inet_ntoa(addr.sin_addr));
                                         close(clientSocket);
                                         unique_call_id += MAX_CALLS_PER_TCP_LINK;
                                         if (!pptp_delegate)
@@ -477,7 +508,6 @@
          */
 
         ctrl_argv[pptpctrl_argc++] = PPTP_CTRL_BIN "                                ";
-
         /* Pass socket as stdin */
         if (clientSocket != 0) {
                 dup2(clientSocket, 0);
